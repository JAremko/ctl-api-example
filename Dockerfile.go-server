# Builder stage for Go
FROM golang:latest as go-builder

# Install the protobuf compiler
RUN apt-get update && apt-get -y install protobuf-compiler

# Install Go protobuf plugin
RUN go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
RUN go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

# Add Go binaries to PATH
ENV PATH=$PATH:/go/bin

# Set the working directory in the Docker image
WORKDIR /ctl-api-example

# Initialize a Go module
RUN go mod init github.com/JAremko/ctl-api-example

# Copy the proto file and server code into the Docker image
COPY thermalcamera.proto .
COPY server/main.go .
COPY server/state.go .
COPY server/cinterface.go .
COPY server/handlers.go .
COPY server/cobs.go .

# Download all dependencies
RUN go get github.com/gorilla/websocket
RUN go get github.com/golang/protobuf/proto
RUN go get google.golang.org/grpc
RUN go get google.golang.org/grpc/codes
RUN go get google.golang.org/grpc/status

# Compile the protobuf files
RUN mkdir -p thermalcamera && \
    protoc --go_out=./thermalcamera --go_opt=paths=source_relative ./thermalcamera.proto

# Build the Go app
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o server

# Make the server executable
RUN chmod +x server

# Final stage
FROM ubuntu:latest

# Copy the standalone executable from the builder image
COPY --from=go-builder /ctl-api-example/server /app/server

# Expose the port the app runs on
EXPOSE 8085

# Set the working directory and command for running the application
WORKDIR /app
CMD ["/app/server"]
